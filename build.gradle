
buildscript {
    ext {
        springBootVersion = '2.2.2.RELEASE'
        springRestDocVersion = '2.0.4.RELEASE'
        springDataJpaVersion = '2.2.4.RELEASE'
        springRestDocsVersion = '2.0.4.RELEASE'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
    }
}


wrapper {
    gradleVersion = '4.10.3'
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'

    group 'com.sondahum.mamas'
    version '1.0-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://jitpack.io" }
    }


    dependencies {

        //todo junit5 부터는 테스트 코드 작성을 위한 api모듈과 돌리기 위한 engine모듈이 별도로 존재한다.

        // junit vintage
        testCompileOnly 'junit:junit:4.12'
        // junit vintage engine
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.0'

    }


    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true // 개발자 확인용
        xml.enabled = true // coveralls 전송용
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}


